@extends('layouts.ams')

@section('title', 'Create New Order')

@section('content')
    <div class="container-fluid py-2">
        <!-- Header Info -->
        <div class="row g-2 mb-2">
            <div class="col-md-12">
                <div class="d-flex align-items-center gap-2">
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Customer</span>
                        <select class="form-select form-select-sm" id="customer-select" style="min-width: 200px;">
                            <option value="">Select Customer...</option>
                            @foreach ($customers as $customer)
                                <option value="{{ $customer->customer_id }}" data-email="{{ $customer->email }}"
                                    data-company="{{ $customer->company_name }}" data-phone="{{ $customer->phone }}"
                                    data-alt-phone="{{ $customer->alternative_phone }}" data-fax="{{ $customer->fax }}"
                                    {{ request('customer_id') == $customer->customer_id ? 'selected' : '' }}>
                                    {{ $customer->name }}
                                </option>
                            @endforeach
                        </select>
                    </div>
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Call Date</span>
                        <input type="date" class="form-control form-control-sm" id="call-date"
                            value="{{ date('Y-m-d') }}" readonly>
                    </div>
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Quote</span>
                        <input type="text" class="form-control form-control-sm" id="quote-number"
                            value="{{ auth()->user()->username ?? '' }}">
                    </div>
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Sold</span>
                        <input type="text" class="form-control form-control-sm" id="sold-number">
                    </div>
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Customer Confirmed</span>
                        <input type="text" class="form-control form-control-sm" id="sold-number">
                    </div>
                    <div class="input-group input-group-sm" style="width: auto;">
                        <span class="input-group-text">Shipped Confirmed</span>
                        <input type="text" class="form-control form-control-sm" id="sold-number">
                    </div>
                    <div class="input-group input-group-sm ms-2" style="width: auto;">
                        <span class="input-group-text">Sales Person</span>
                        <select class="form-select form-select-sm" id="sales-person" style="width: 100px;">
                            <option value="">N/A</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-md-12 text-end mb-2">
                <button type="button" class="btn btn-sm btn-success me-1" id="save-order">Save and Finish</button>
                <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#productSelectorModal">
                    <i class="fas fa-plus"></i> Add Products
                </button>
            </div>
        </div>

        <!-- Main Form -->
        <form id="order-form">
            <div class="row g-2">
                <!-- Left Column -->
                <div class="col-md-6">
                    <!-- Shipping Info -->
                    <div class="card card-sm mb-2">
                        <div class="card-body p-2">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Shipping Information</h6>
                                <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal"
                                    data-bs-target="#addressBookModal">
                                    <i class="fas fa-address-book"></i> Address Book
                                </button>
                            </div>
                            <div class="form-check form-check-inline mb-2">
                                <input class="form-check-input" type="checkbox" id="non-residential">
                                <label class="form-check-label small" for="non-residential">Non-residential</label>
                            </div>
                            <select class="form-select form-select-sm" id="shipping-address">
                                <option value="">Select Address</option>
                            </select>
                            <div class="input-group input-group-sm mt-2">
                                <span class="input-group-text">Address 1</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-address-1">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Address 2</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-address-2">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">City</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-city">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">State</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-state">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Zip</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-zip">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Country</span>
                                <input type="text" class="form-control form-control-sm" id="shipping-country">
                            </div>
                        </div>
                    </div>

                    <!-- Billing Info -->
                    <div class="card card-sm mb-2">
                        <div class="card-body p-2">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Billing Information</h6>
                                {{-- <button type="button" class="btn btn-sm btn-outline-primary py-0" data-bs-toggle="modal"
                                    data-bs-target="#addressBookModal">View Address Book</button> --}}
                            </div>
                            <select class="form-select form-select-sm" id="billing-address">
                                <option value="">Select Address</option>
                            </select>
                            <div class="input-group input-group-sm mt-2">
                                <span class="input-group-text">Address 1</span>
                                <input type="text" class="form-control form-control-sm" id="billing-address-1">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Address 2</span>
                                <input type="text" class="form-control form-control-sm" id="billing-address-2">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">City</span>
                                <input type="text" class="form-control form-control-sm" id="billing-city">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">State</span>
                                <input type="text" class="form-control form-control-sm" id="billing-state">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Zip</span>
                                <input type="text" class="form-control form-control-sm" id="billing-zip">
                            </div>
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Country</span>
                                <input type="text" class="form-control form-control-sm" id="billing-country">
                            </div>
                            <div class="form-check form-check-inline mt-2">
                                <input class="form-check-input" type="checkbox" id="same-as-shipping">
                                <label class="form-check-label small" for="same-as-shipping">Same as Shipping</label>
                            </div>
                        </div>
                    </div>

                    <!-- Origin and Shipping -->
                    <div class="card card-sm mb-2">
                        <div class="card-body p-2">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <h6 class="card-title small mb-2">Origin</h6>
                                    <div class="btn-group-vertical w-100" role="group">
                                        <input type="radio" class="btn-check" name="origin" id="origin-afc-stock"
                                            value="afc_stock" checked>
                                        <label class="btn btn-sm btn-outline-secondary py-0" for="origin-afc-stock">AFC
                                            Stock</label>
                                        <input type="radio" class="btn-check" name="origin" id="origin-afc-make"
                                            value="afc_make">
                                        <label class="btn btn-sm btn-outline-secondary py-0" for="origin-afc-make">AFC
                                            Make</label>
                                        <input type="radio" class="btn-check" name="origin" id="origin-afc-acquire"
                                            value="afc_acquire">
                                        <label class="btn btn-sm btn-outline-secondary py-0" for="origin-afc-acquire">AFC
                                            Acquire</label>
                                        <input type="radio" class="btn-check" name="origin" id="origin-drop-ship"
                                            value="drop_ship">
                                        <label class="btn btn-sm btn-outline-secondary py-0" for="origin-drop-ship">Drop
                                            Ship</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="card-title small mb-2">Shipping Method</h6>
                                    <div class="btn-group-vertical w-100" role="group">
                                        <input type="radio" class="btn-check" name="shipping_method"
                                            id="shipping-small-package" value="small_package">
                                        <label class="btn btn-sm btn-outline-secondary py-0"
                                            for="shipping-small-package">Small Package</label>
                                        <input type="radio" class="btn-check" name="shipping_method"
                                            id="shipping-freight" value="freight">
                                        <label class="btn btn-sm btn-outline-secondary py-0"
                                            for="shipping-freight">Freight</label>
                                        <input type="radio" class="btn-check" name="shipping_method"
                                            id="shipping-delivery-afc" value="delivery_afc">
                                        <label class="btn btn-sm btn-outline-secondary py-0"
                                            for="shipping-delivery-afc">Delivery AFC</label>
                                        <input type="radio" class="btn-check" name="shipping_method"
                                            id="shipping-pickup-afc" value="pickup_afc">
                                        <label class="btn btn-sm btn-outline-secondary py-0"
                                            for="shipping-pickup-afc">Pickup AFC</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-md-6">
                    <!-- Payment Info -->
                    <div class="card card-sm mb-2">
                        <div class="card-body p-2">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0">Payment Information</h6>
                                <div class="form-check form-check-inline m-0">
                                    <input class="form-check-input" type="checkbox" id="add-po">
                                    <label class="form-check-label small" for="add-po">Add PO</label>
                                </div>
                            </div>
                            <select class="form-select form-select-sm" id="payment-method">
                                <option value="">Select Payment</option>
                            </select>
                        </div>
                    </div>

                    <!-- Correspondence -->
                    <div class="card card-sm mb-2">
                        <div class="card-body p-2">
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <h6 class="card-title small mb-2">Customer</h6>
                                    <select class="form-select form-select-sm mb-2" id="customer-print">
                                        <option value="">Print...</option>
                                        <option value="invoice">Invoice</option>
                                        <option value="quote">Quote</option>
                                    </select>
                                    <select class="form-select form-select-sm" id="customer-email">
                                        <option value="">Email...</option>
                                        <option value="invoice">Invoice</option>
                                        <option value="quote">Quote</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="card-title small mb-2">Supplier</h6>
                                    <select class="form-select form-select-sm mb-2" id="supplier-print">
                                        <option value="">Print Fax Order</option>
                                        <option value="ship_request">Print Ship Request</option>
                                    </select>
                                    <select class="form-select form-select-sm" id="supplier-email">
                                        <option value="">Email Supplier</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Items Table -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Order Items</h5>
                    <div>
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#productSelectorModal">
                            <i class="fas fa-plus"></i> Add Products
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-sm table-hover table-striped mb-0" id="order-items-table">
                            <thead class="bg-light">
                                <tr>
                                    <th style="width: 10%">Item #</th>
                                    <th style="width: 30%">Description</th>
                                    <th style="width: 10%">Size</th>
                                    <th style="width: 10%">Quantity</th>
                                    <th style="width: 10%">Unit Price</th>
                                    <th style="width: 10%">Total</th>
                                    <th style="width: 10%">Weight</th>
                                    <th style="width: 10%">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr id="empty-order-message">
                                    <td colspan="8" class="text-center py-3">No items added to this order yet.</td>
                                </tr>
                            </tbody>
                            <tfoot class="bg-light">
                                <tr>
                                    <td colspan="5" class="text-end"><strong>Subtotal:</strong></td>
                                    <td id="order-subtotal">$0.00</td>
                                    <td id="order-total-weight">0 lbs</td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Hidden fields for order submission -->
            <input type="hidden" name="order_id" value="{{ $order->order_id }}">
            <input type="hidden" name="order_items" id="orderItemsJson">

            <!-- Order Totals -->
            <div class="card card-sm mt-2">
                <div class="card-body p-2">
                    <div class="row g-2">
                        <div class="col-md-6">
                            <div class="mb-2">
                                <label class="form-label small">Shipping Cost ($)</label>
                                <input type="number" class="form-control form-control-sm" id="shipping-cost"
                                    value="0" min="0" step="0.01">
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Tax Rate (%)</label>
                                <input type="number" class="form-control form-control-sm" id="tax-rate" value="0"
                                    min="0" max="100" step="0.01">
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Discount ($)</label>
                                <input type="number" class="form-control form-control-sm" id="discount" value="0"
                                    min="0" step="0.01">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-sm">
                                <tr>
                                    <td>Subtotal:</td>
                                    <td class="text-end">$<span id="subtotal">0.00</span></td>
                                </tr>
                                <tr>
                                    <td>Shipping:</td>
                                    <td class="text-end">$<span id="shipping-cost-display">0.00</span></td>
                                </tr>
                                <tr>
                                    <td>Tax:</td>
                                    <td class="text-end">$<span id="tax-amount">0.00</span></td>
                                </tr>
                                <tr>
                                    <td>Discount:</td>
                                    <td class="text-end">-$<span id="discount-display">0.00</span></td>
                                </tr>
                                <tr class="fw-bold">
                                    <td>Total:</td>
                                    <td class="text-end">$<span id="total">0.00</span></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Shipping Calculator -->
            <div class="card card-sm mt-2">
                <div class="card-body p-2">
                    <div class="row g-2">
                        <div class="col-md-12">
                            <div class="d-flex align-items-center gap-3">
                                <button type="button" class="btn btn-sm btn-primary" id="calculate-shipping-btn">Calculate Shipping</button>
                                <button type="button" class="btn btn-sm btn-danger" id="delete-shipping-btn">Delete Shipping</button>

                                <div class="d-flex align-items-center gap-2">
                                    <div class="form-check form-check-inline m-0">
                                        <input class="form-check-input" type="checkbox" id="tax-exempt">
                                        <label class="form-check-label small" for="tax-exempt">Tax Exempt</label>
                                    </div>

                                    <div class="input-group input-group-sm" style="width: auto;">
                                        <span class="input-group-text">Deposit</span>
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" type="radio" name="deposit"
                                                value="1st">
                                            <label class="form-check-label ms-1">1st</label>
                                        </div>
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" type="radio" name="deposit"
                                                value="2nd">
                                            <label class="form-check-label ms-1">2nd</label>
                                        </div>
                                    </div>
                                    <small class="text-muted">50% deposit required</small>
                                </div>

                                <div class="d-flex gap-2 flex-grow-1">
                                    <input type="text" class="form-control form-control-sm" placeholder="Carrier">
                                    <input type="text" class="form-control form-control-sm" placeholder="Weight">
                                    <input type="text" class="form-control form-control-sm" placeholder="Class">
                                    <input type="text" class="form-control form-control-sm" placeholder="Cost Price">
                                    <input type="text" class="form-control form-control-sm" placeholder="Zip">
                                    <input type="date" class="form-control form-control-sm" id="res-date"
                                        value="{{ date('Y-m-d') }}">
                                    <input type="text" class="form-control form-control-sm" placeholder="Packages">
                                    <input type="text" class="form-control form-control-sm" placeholder="Quoted by">
                                    <input type="text" class="form-control form-control-sm" placeholder="Quote #">
                                    <button type="button" class="btn btn-sm btn-success">Select Show</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Shipping Rates Section -->
            <div class="card card-sm mt-2" id="shipping-rates-card" style="display: none;">
                <div class="card-body p-2">
                    <div class="row g-2">
                        <div class="col-md-12">
                            <h6 class="card-title mb-2">Available Shipping Rates</h6>
                            <div id="shipping-rates-container" class="p-2 border rounded">
                                <!-- Shipping rates will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Display on Homepage -->
            <div class="card card-sm mt-2">
                <div class="card-body p-2">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto">
                            <label class="mb-0">DISPLAY ON HOMEPAGE:</label>
                        </div>
                        <div class="col">
                            <input type="text" class="form-control form-control-sm" value="USE AT YOUR OWN RISK">
                        </div>
                        <div class="col-auto">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="enable-display">
                                <label class="form-check-label" for="enable-display">Enable:</label>
                            </div>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-sm btn-success">Add/Edit</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Custom Order Actions -->
            <div class="card card-sm mt-2">
                <div class="card-body p-2">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto">
                            <label class="mb-0">Custom Order Actions Note:</label>
                        </div>
                        <div class="col">
                            <input type="text" class="form-control form-control-sm">
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-sm btn-success">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Activity -->
            <div class="card card-sm mt-2">
                <div class="card-body p-2">
                    <h6 class="card-title small mb-2">Order Activity:</h6>
                    <ol class="list-unstyled mb-0 small">
                        <li>1.) Order Started: by sunny on {{ date('m/d/Y H:i:s') }}</li>
                        <li>2.) Order origin is AFC Stock by sunny on {{ date('m/d/Y H:i:s') }}</li>
                        <li>3.) Order origin is AFC Make by sunny on {{ date('m/d/Y H:i:s') }}</li>
                        <li>4.) Order origin is AFC Acquire by sunny on {{ date('m/d/Y H:i:s') }}</li>
                        <li>5.) Order origin is Drop Ship by sunny on {{ date('m/d/Y H:i:s') }}</li>
                    </ol>
                </div>
            </div>
        </form>
    </div>

    <!-- Address Book Modal -->
    <div class="modal fade" id="addressBookModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Address Book</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                            <i class="fas fa-plus"></i> Add New Address
                        </button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Address 1</th>
                                    <th>Address 2</th>
                                    <th>City</th>
                                    <th>State</th>
                                    <th>Zip</th>
                                    <th>Type</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="addressBookTable">
                                <!-- Addresses will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="mb-2">
                            <label class="form-label small">Address 1</label>
                            <input type="text" class="form-control form-control-sm" id="new-address-1" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">Address 2</label>
                            <input type="text" class="form-control form-control-sm" id="new-address-2">
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">City</label>
                            <input type="text" class="form-control form-control-sm" id="new-city" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">State</label>
                            <input type="text" class="form-control form-control-sm" id="new-state" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">Zip</label>
                            <input type="text" class="form-control form-control-sm" id="new-zip" required>
                        </div>
                        <div class="mb-2">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="new-shipping" checked>
                                <label class="form-check-label small">Shipping Address</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="new-billing" checked>
                                <label class="form-check-label small">Billing Address</label>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-sm btn-primary">Add Address</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editAddressForm">
                        <input type="hidden" id="edit-address-id">
                        <div class="mb-2">
                            <label class="form-label small">Address 1</label>
                            <input type="text" class="form-control form-control-sm" id="edit-address-1" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">Address 2</label>
                            <input type="text" class="form-control form-control-sm" id="edit-address-2">
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">City</label>
                            <input type="text" class="form-control form-control-sm" id="edit-city" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">State</label>
                            <input type="text" class="form-control form-control-sm" id="edit-state" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label small">Zip</label>
                            <input type="text" class="form-control form-control-sm" id="edit-zip" required>
                        </div>
                        <div class="mb-2">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="edit-shipping">
                                <label class="form-check-label small">Shipping Address</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="edit-billing">
                                <label class="form-check-label small">Billing Address</label>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-sm btn-primary">Update Address</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Selector Modal -->
    <div class="modal fade" id="productSelectorModal" tabindex="-1" aria-labelledby="productSelectorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productSelectorModalLabel">Select Products</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Category Tree -->
                        <div class="col-md-4 border-end">
                            <h6>Categories</h6>
                            <div class="category-tree">
                                <ul class="list-group">
                                    @foreach ($categories as $category)
                                        <li class="list-group-item">
                                            <div class="d-flex align-items-center">
                                                @if ($category->children->count() > 0)
                                                    <span class="expand-icon me-2" data-bs-toggle="collapse" data-bs-target="#category-{{ $category->family_category_id }}">
                                                        <i class="fas fa-caret-right"></i>
                                                    </span>
                                                @else
                                                    <span class="me-2 ps-2"></span>
                                                @endif
                                                <a href="#" class="category-link" data-category-id="{{ $category->family_category_id }}">
                                                    {{ $category->family_category_name }}
                                                </a>
                                            </div>
                                            @if ($category->children->count() > 0)
                                                <div class="collapse" id="category-{{ $category->family_category_id }}">
                                                    <ul class="list-group list-group-flush mt-1 ps-4">
                                                        @foreach ($category->children as $child)
                                                            <li class="list-group-item border-0 py-1">
                                                                <a href="#" class="category-link" data-category-id="{{ $child->family_category_id }}">
                                                                    {{ $child->family_category_name }}
                                                                </a>
                                                            </li>
                                                        @endforeach
                                                    </ul>
                                                </div>
                                            @endif
                                        </li>
                                    @endforeach
                                </ul>
                            </div>
                        </div>
                        
                        <!-- Product List -->
                        <div class="col-md-8">
                            <div id="product-list-container">
                                <div class="text-center py-4">
                                    <p>Select a category to view products</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast for Product Added Notification -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" id="productAddedToast">
            <div class="d-flex">
                <div class="toast-body">
                    Product added to order successfully!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

@endsection

@section('styles')
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .card-sm {
            border: 1px solid rgba(0, 0, 0, 0.125);
        }

        .category-tree {
            list-style: none;
            padding-left: 0;
        }

        .category-tree ul {
            list-style: none;
            padding-left: 1.5rem;
        }

        .category-item {
            margin-bottom: 0.25rem;
        }

        .toggle-btn {
            padding: 0;
            color: #6c757d;
        }

        .category-link {
            text-decoration: none;
            color: #212529;
            cursor: pointer;
        }

        .category-link:hover {
            color: #0d6efd;
        }

        .category-link.active {
            color: #0d6efd;
            font-weight: 500;
        }

        .nested {
            display: none;
        }

        .card-sm {
            margin-bottom: 0.5rem;
        }

        .card-sm .card-body {
            padding: 0.5rem;
        }

        .form-control-sm,
        .form-select-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .table> :not(caption)>*>* {
            padding: 0.25rem;
        }

        .btn-group-vertical>.btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            text-align: left;
        }
    </style>
@endsection

@section('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle category tree navigation
            const categoryLinks = document.querySelectorAll('.category-link');
            const productListContainer = document.getElementById('product-list-container');
            const orderItemsTable = document.getElementById('order-items-table');
            const productToast = document.getElementById('productAddedToast');
            
            // Set up category tree interaction
            document.querySelectorAll('.expand-icon').forEach(icon => {
                icon.addEventListener('click', function() {
                    const caret = this.querySelector('i');
                    if (caret) {
                        caret.classList.toggle('fa-caret-right');
                        caret.classList.toggle('fa-caret-down');
                    }
                    
                    // Toggle visibility of child categories
                    const parent = this.closest('li');
                    const childList = parent.querySelector('ul');
                    if (childList) {
                        childList.classList.toggle('d-none');
                    }
                });
            });
            
            // Handle category selection
            categoryLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Highlight the selected category
                    categoryLinks.forEach(l => l.classList.remove('active', 'font-weight-bold', 'text-primary'));
                    this.classList.add('active', 'font-weight-bold', 'text-primary');
                    
                    // Load products for this category
                    const categoryId = this.getAttribute('data-category-id');
                    if (categoryId) {
                        fetchProductsByCategory(categoryId);
                    }
                });
            });
            
            // Fetch products by category
            function fetchProductsByCategory(categoryId) {
                if (!productListContainer) return;
                
                // Show loading indicator
                productListContainer.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary"></div><p class="mt-2">Loading products...</p></div>';
                
                // Fetch products from API
                fetch(`/ams/orders/get-products?category=${categoryId}`)
                    .then(response => response.json())
                    .then(products => {
                        if (products.length === 0) {
                            productListContainer.innerHTML = '<div class="alert alert-info">No products found in this category.</div>';
                            return;
                        }
                        
                        // Render products
                        displayProducts(products);
                    })
                    .catch(error => {
                        console.error('Error fetching products:', error);
                        productListContainer.innerHTML = '<div class="alert alert-danger">Failed to load products.</div>';
                    });
            }
            
            // Display products in container
            function displayProducts(products) {
                if (!productListContainer) return;
                
                // Group products by style and color
                const productGroups = {};
                
                products.forEach(product => {
                    const style = product.details?.style || 'Other';
                    const color = product.details?.color || '';
                    const groupKey = style + (color ? ' - ' + color : '');
                    
                    if (!productGroups[groupKey]) {
                        productGroups[groupKey] = [];
                    }
                    
                    productGroups[groupKey].push(product);
                });
                
                // Clear container
                productListContainer.innerHTML = '';
                
                // Render each product group
                Object.keys(productGroups).sort().forEach(groupKey => {
                    const groupProducts = productGroups[groupKey];
                    
                    // Create product group element
                    const groupEl = document.createElement('div');
                    groupEl.className = 'mb-4';
                    
                    // Create table for this group
                    let tableHtml = `
                        <div class="card">
                            <div class="card-header bg-dark text-white">${groupKey}</div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped mb-0">
                                        <thead>
                                            <tr>
                                                <th>Item #</th>
                                                <th>Size</th>
                                                <th>Price</th>
                                                <th>Quantity</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                    `;
                    
                    // Add rows for each product
                    groupProducts.forEach(product => {
                        tableHtml += `
                            <tr data-product-id="${product.product_id}">
                                <td>${product.item_no}</td>
                                <td>${product.details?.size1 || ''}</td>
                                <td>$${parseFloat(product.price_per_unit).toFixed(2)}</td>
                                <td>
                                    <input type="number" class="form-control form-control-sm product-qty" value="1" min="1" style="width: 70px">
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary add-product-btn">Add</button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableHtml += `
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    groupEl.innerHTML = tableHtml;
                    productListContainer.appendChild(groupEl);
                });
                
                // Add event listeners to Add buttons
                document.querySelectorAll('.add-product-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const row = this.closest('tr');
                        const productId = row.getAttribute('data-product-id');
                        const product = products.find(p => p.product_id == productId);
                        
                        if (product) {
                            const quantity = parseInt(row.querySelector('.product-qty').value) || 1;
                            addProductToOrder(product, quantity);
                            
                            // Show toast notification
                            if (productToast) {
                                const toast = new bootstrap.Toast(productToast);
                                toast.show();
                            }
                        }
                    });
                });
            }
            
            // Add product to order
            function addProductToOrder(product, quantity) {
                if (!orderItemsTable) return;
                
                const tbody = orderItemsTable.querySelector('tbody');
                const emptyRow = document.getElementById('empty-order-message');
                
                if (emptyRow) {
                    emptyRow.style.display = 'none';
                }
                
                // Check if product already exists in table
                const existingRow = tbody.querySelector(`tr[data-product-id="${product.product_id}"]`);
                
                if (existingRow) {
                    // Update quantity of existing row
                    const qtyInput = existingRow.querySelector('input.product-quantity');
                    const currentQty = parseInt(qtyInput.value) || 0;
                    qtyInput.value = currentQty + quantity;
                    
                    // Update row total
                    updateRowTotal(existingRow);
                } else {
                    // Create new row
                    const row = document.createElement('tr');
                    row.setAttribute('data-product-id', product.product_id);
                    
                    row.innerHTML = `
                        <td>${product.item_no}</td>
                        <td>${product.description}</td>
                        <td>${product.details?.size1 || ''}</td>
                        <td>
                            <input type="number" class="form-control form-control-sm product-quantity" 
                                   value="${quantity}" min="1" onchange="updateOrderTotals()">
                            <input type="hidden" name="items[${product.product_id}][product_id]" value="${product.product_id}">
                            <input type="hidden" name="items[${product.product_id}][price]" value="${product.price_per_unit}">
                        </td>
                        <td class="product-price">$${parseFloat(product.price_per_unit).toFixed(2)}</td>
                        <td class="product-total">$${(parseFloat(product.price_per_unit) * quantity).toFixed(2)}</td>
                        <td>${product.details?.weight || '0'}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger remove-item">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    
                    tbody.appendChild(row);
                    
                    // Add event listener to remove button
                    row.querySelector('.remove-item').addEventListener('click', function() {
                        row.remove();
                        updateOrderTotals();
                        
                        // Show empty message if no items left
                        if (tbody.querySelectorAll('tr').length === 0 && emptyRow) {
                            emptyRow.style.display = '';
                        }
                    });
                }
                
                // Update order totals
                updateOrderTotals();
                
                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('productSelectorModal'));
                if (modal) {
                    modal.hide();
                }
            }
            
            // Update total for a specific row
            function updateRowTotal(row) {
                const quantity = parseInt(row.querySelector('input.product-quantity').value) || 0;
                const priceText = row.querySelector('.product-price').textContent;
                const price = parseFloat(priceText.replace('$', '')) || 0;
                
                const total = price * quantity;
                row.querySelector('.product-total').textContent = '$' + total.toFixed(2);
            }
            
            // Update all order totals
            function updateOrderTotals() {
                if (!orderItemsTable) return;
                
                const tbody = orderItemsTable.querySelector('tbody');
                const rows = tbody.querySelectorAll('tr:not(#empty-order-message)');
                
                let subtotal = 0;
                let totalWeight = 0;
                
                rows.forEach(row => {
                    // Update the row total first
                    updateRowTotal(row);
                    
                    // Add to totals
                    const quantity = parseInt(row.querySelector('input.product-quantity').value) || 0;
                    const totalText = row.querySelector('.product-total').textContent;
                    const rowTotal = parseFloat(totalText.replace('$', '')) || 0;
                    const weightText = row.querySelector('td:nth-child(7)').textContent;
                    const weight = parseFloat(weightText) || 0;
                    
                    subtotal += rowTotal;
                    totalWeight += (quantity * weight);
                });
                
                // Update summary totals
                const subtotalEl = document.getElementById('order-subtotal');
                const weightEl = document.getElementById('order-total-weight');
                
                if (subtotalEl) subtotalEl.textContent = '$' + subtotal.toFixed(2);
                if (weightEl) weightEl.textContent = totalWeight.toFixed(2) + ' lbs';
            }
            
            // Make function available globally
            window.updateOrderTotals = updateOrderTotals;
        });

        // Vanilla JavaScript for calculating shipping rates
        function calculateShipping() {
            const shippingAddress = document.getElementById('shipping-address-1').value;
            const shippingCity = document.getElementById('shipping-city').value;
            const shippingState = document.getElementById('shipping-state').value;
            const shippingZip = document.getElementById('shipping-zip').value;
            const isResidential = !document.getElementById('non-residential').checked;
            
            console.log('Shipping details:', {
                address: shippingAddress,
                city: shippingCity,
                state: shippingState,
                zip: shippingZip,
                isResidential
            });
            
            // Validate shipping address
            if (!shippingAddress || !shippingCity || !shippingState || !shippingZip) {
                alert('Please complete the shipping address before calculating shipping rates.');
                return;
            }
            
            // Get order items for package calculation
            let orderItems;
            try {
                orderItems = JSON.parse(localStorage.getItem('orderItems') || '[]');
                console.log('Order items from localStorage:', orderItems);
            } catch (e) {
                console.error('Error parsing order items:', e);
                orderItems = [];
            }
            
            if (orderItems.length === 0) {
                alert('Please add items to the order before calculating shipping.');
                return;
            }
            
            // Show shipping rates card
            const shippingRatesCard = document.getElementById('shipping-rates-card');
            shippingRatesCard.style.display = 'block';
            
            // Show loading in the shipping rates container
            const ratesContainer = document.getElementById('shipping-rates-container');
            ratesContainer.innerHTML = `
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 mb-0">Fetching shipping rates...</p>
                </div>
            `;
            
            // Get CSRF token
            const csrfToken = document.querySelector('meta[name="csrf-token"]');
            if (!csrfToken) {
                console.error('CSRF token meta tag not found');
                ratesContainer.innerHTML = `
                    <div class="alert alert-danger mb-0">
                        CSRF token not found. Please refresh the page and try again.
                    </div>
                `;
                return;
            }
            
            // Default state markup to 0 if API fails
            let stateMarkup = 0;
            
            // Prepare packages data
            let packages = [];
            let totalWeight = 0;
            
            orderItems.forEach(item => {
                const quantity = parseInt(item.quantity) || 1;
                const weight = parseFloat(item.weight) || 1.0;
                
                // Ensure we have dimensions with fallbacks
                const length = parseFloat(item.shippingLength || item.length) || 12.0;
                const width = parseFloat(item.shippingWidth || item.width) || 12.0;
                const height = parseFloat(item.shippingHeight || item.height) || 12.0;
                
                console.log(`Item ${item.itemNo} dimensions:`, { length, width, height, weight });
                
                // Calculate total weight
                totalWeight += weight * quantity;
                
                // Add package for each item quantity
                for (let i = 0; i < quantity; i++) {
                    packages.push({
                        weight: weight.toFixed(2),
                        dimensions: {
                            length: length.toFixed(2),
                            width: width.toFixed(2),
                            height: height.toFixed(2)
                        }
                    });
                }
            });
            
            if (packages.length === 0) {
                console.error('No valid packages created from order items');
                ratesContainer.innerHTML = `
                    <div class="alert alert-danger mb-0">
                        Unable to create package data from order items. Please ensure items have weight and dimensions.
                    </div>
                `;
                return;
            }
            
            const requestData = {
                recipient_address: shippingAddress,
                recipient_city: shippingCity,
                recipient_state: shippingState,
                recipient_postal: shippingZip,
                residential: isResidential,
                packages: packages
            };
            
            console.log('Request data for shipping API:', requestData);
            console.log('Total weight calculated:', totalWeight);
            
            // Try to get state markup first, but continue with calculation even if it fails
            fetch(`/api/state-markup/${shippingState}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': csrfToken.content
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`State markup API returned ${response.status}`);
                }
                return response.json();
            })
            .then(markupData => {
                stateMarkup = parseFloat(markupData.markup) || 0;
                console.log('State markup:', stateMarkup);
            })
            .catch(error => {
                console.error('Error fetching state markup, using default 0:', error);
            })
            .finally(() => {
                // Continue with shipping calculations regardless of state markup success
                calculateShippingRates(requestData, stateMarkup, totalWeight, ratesContainer);
            });
        }
        
        function calculateShippingRates(requestData, stateMarkup, totalWeight, ratesContainer) {
            // Clear rates container for new rates
            let hasRates = false;
            
            // Get CSRF token
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
            
            // Determine which shipping API to use based on weight
            if (totalWeight >= 150) {
                // For heavy shipments, use TForce and R&L Carriers
                console.log('Using TForce and R&L for heavy shipment');
                
                // Initialize the HTML structure for tables
                ratesContainer.innerHTML = `
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 mb-0">Fetching shipping rates...</p>
                    </div>
                `;
                
                // Call TForce API
                fetch('/api/tforce-rates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => {
                    console.log('TForce API response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`TForce API returned ${response.status}`);
                    }
                    return response.json();
                })
                .then(tforceData => {
                    if (tforceData.detail && tforceData.detail.length > 0) {
                        hasRates = true;
                        
                        if (ratesContainer.querySelector('.spinner-border')) {
                            ratesContainer.innerHTML = '';
                        }
                        
                        // Create Freight Shipping table
                        if (!document.getElementById('freight-shipping-section')) {
                            const freightSection = document.createElement('div');
                            freightSection.id = 'freight-shipping-section';
                            freightSection.innerHTML = `
                                <h6>Freight Shipping</h6>
                                <div class="table-responsive">
                                    <table class="table table-bordered table-sm">
                                        <thead class="bg-light">
                                            <tr>
                                                <th>Select</th>
                                                <th>Carrier</th>
                                                <th>Service</th>
                                                <th>Weight</th>
                                                <th>Cost</th>
                                                <th>Markup</th>
                                                <th>Price</th>
                                                <th>Transit Time</th>
                                            </tr>
                                        </thead>
                                        <tbody id="freight-shipping-rates"></tbody>
                                    </table>
                                </div>
                            `;
                            ratesContainer.appendChild(freightSection);
                        }
                        
                        const freightRatesBody = document.getElementById('freight-shipping-rates');
                        
                        tforceData.detail.forEach(shipment => {
                            const serviceCode = shipment.service.code;
                            
                            // Map TForce service codes to readable names
                            const serviceNames = {
                                308: "Standard LTL",
                                309: "Economy",
                                310: "Guaranteed LTL",
                                311: "Guaranteed AM",
                                312: "Guaranteed PM"
                            };
                            
                            const serviceName = serviceNames[serviceCode] || `Service ${serviceCode}`;
                            
                            const baseRate = parseFloat(
                                shipment.shipmentCharges?.baseFreightCharge?.value ||
                                shipment.shipmentCharges?.total?.value ||
                                0
                            );
                            
                            // Get accessorial charges
                            const accessorialCharges = shipment.accessorialCharges || [];
                            const residentialFee = accessorialCharges.find(
                                charge => charge.accessorialCode === "RESD"
                            )?.amount || 0;
                            const liftGateFee = accessorialCharges.find(
                                charge => charge.accessorialCode === "LIFTG"
                            )?.amount || 0;
                            
                            // Calculate total with markups
                            const subtotal = baseRate + residentialFee + liftGateFee;
                            const thirtyThreeMarkup = subtotal / (1 - 0.33);
                            const markupAmount = thirtyThreeMarkup - subtotal;
                            const totalCharges = thirtyThreeMarkup + stateMarkup;
                            
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input shipping-rate-radio" type="radio" 
                                            name="shipping_option" id="tforce-${serviceCode}" 
                                            data-carrier="TForce" data-service="${serviceName}"
                                            data-charge="${totalCharges.toFixed(2)}" value="tforce-${serviceCode}">
                                    </div>
                                </td>
                                <td>TForce</td>
                                <td>${serviceName}</td>
                                <td>${totalWeight.toFixed(2)} lbs</td>
                                <td>$${baseRate.toFixed(2)}</td>
                                <td>$${markupAmount.toFixed(2)}${stateMarkup > 0 ? ' + $' + stateMarkup.toFixed(2) : ''}</td>
                                <td>$${totalCharges.toFixed(2)}</td>
                                <td>${shipment.timeInTransit?.timeInTransit || 'N/A'} Day(s)</td>
                            `;
                            
                            freightRatesBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error('TForce API request failed:', error);
                });
                
                // Call R&L Carriers API with fixes
                let rlCarriersData = {
                    ...requestData,
                    recipient_zip: requestData.recipient_postal, // Use recipient_zip instead of recipient_postal
                };
                
                console.log('R&L Carriers request data:', rlCarriersData);
                
                fetch('/api/rl-carriers-rates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken
                    },
                    body: JSON.stringify(rlCarriersData)
                })
                .then(response => {
                    console.log('R&L Carriers API response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`R&L Carriers API returned ${response.status}`);
                    }
                    return response.json();
                })
                .then(rlCarriersData => {
                    console.log('R&L Carriers response:', rlCarriersData);
                    
                    // Process R&L Carriers response
                    if (rlCarriersData.d && rlCarriersData.d.Result) {
                        hasRates = true;
                        
                        if (ratesContainer.querySelector('.spinner-border')) {
                            ratesContainer.innerHTML = '';
                        }
                        
                        // Create Freight Shipping table if it doesn't exist
                        if (!document.getElementById('freight-shipping-section')) {
                            const freightSection = document.createElement('div');
                            freightSection.id = 'freight-shipping-section';
                            freightSection.innerHTML = `
                                <h6>Freight Shipping</h6>
                                <div class="table-responsive">
                                    <table class="table table-bordered table-sm">
                                        <thead class="bg-light">
                                            <tr>
                                                <th>Select</th>
                                                <th>Carrier</th>
                                                <th>Service</th>
                                                <th>Weight</th>
                                                <th>Cost</th>
                                                <th>Markup</th>
                                                <th>Price</th>
                                                <th>Transit Time</th>
                                            </tr>
                                        </thead>
                                        <tbody id="freight-shipping-rates"></tbody>
                                    </table>
                                </div>
                            `;
                            ratesContainer.appendChild(freightSection);
                        }
                        
                        const freightRatesBody = document.getElementById('freight-shipping-rates');
                        const rlResult = rlCarriersData.d.Result;
                        
                        rlResult.ServiceLevels.forEach(service => {
                            const serviceTitle = service.Title;
                            const netCharge = parseFloat(service.NetCharge.replace(/[^0-9.]/g, ""));
                            
                            // Apply 33% markup
                            const markupAmount = (netCharge * 0.33) / (1 - 0.33);
                            const priceWithMarkup = netCharge + markupAmount;
                            const totalCharge = priceWithMarkup + stateMarkup;
                            
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input shipping-rate-radio" type="radio" 
                                            name="shipping_option" id="rlcarriers-${service.Code}" 
                                            data-carrier="R&L Carriers" data-service="${serviceTitle}"
                                            data-charge="${totalCharge.toFixed(2)}" value="rlcarriers-${service.Code}">
                                    </div>
                                </td>
                                <td>R&L Carriers</td>
                                <td>${serviceTitle}</td>
                                <td>${totalWeight.toFixed(2)} lbs</td>
                                <td>$${netCharge.toFixed(2)}</td>
                                <td>$${markupAmount.toFixed(2)}${stateMarkup > 0 ? ' + $' + stateMarkup.toFixed(2) : ''}</td>
                                <td>$${totalCharge.toFixed(2)}</td>
                                <td>${service.ServiceDays} Day(s)</td>
                            `;
                            
                            freightRatesBody.appendChild(row);
                        });
                    }
                })
                .catch(rlError => {
                    console.error('R&L Carriers API request failed:', rlError);
                })
                .finally(() => {
                    // If no rates found after all API calls are complete
                    setTimeout(() => {
                        if (ratesContainer.children.length === 0 || 
                            (ratesContainer.innerHTML.includes('Loading') && 
                             !document.getElementById('freight-shipping-section') && 
                             !document.getElementById('ups-shipping-section'))) {
                            ratesContainer.innerHTML = `
                                <div class="alert alert-danger mb-0">
                                    Unable to fetch shipping rates. Please verify the shipping address and try again or check console for errors.
                                </div>
                            `;
                        }
                    }, 3000);
                });
            } else {
                // For lighter shipments, use UPS
                console.log('Using UPS for lighter shipment');
                
                // Initialize the HTML structure for tables
                ratesContainer.innerHTML = `
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 mb-0">Fetching shipping rates...</p>
                    </div>
                `;
                
                fetch('/api/ups-rates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => {
                    console.log('UPS API response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`UPS API returned ${response.status}`);
                    }
                    return response.json();
                })
                .then(upsData => {
                    console.log('UPS response data:', upsData);
                    
                    // Clear the container
                    ratesContainer.innerHTML = '';
                    
                    // Process UPS response
                    if (upsData.RateResponse && upsData.RateResponse.RatedShipment && upsData.RateResponse.RatedShipment.length > 0) {
                        hasRates = true;
                        
                        // Create UPS Shipping table
                        const upsSection = document.createElement('div');
                        upsSection.id = 'ups-shipping-section';
                        upsSection.innerHTML = `
                            <h6>UPS Shipping</h6>
                            <div class="table-responsive">
                                <table class="table table-bordered table-sm">
                                    <thead class="bg-light">
                                        <tr>
                                            <th>Select</th>
                                            <th>Service</th>
                                            <th>Weight</th>
                                            <th>Cost</th>
                                            <th>Markup</th>
                                            <th>Price</th>
                                        </tr>
                                    </thead>
                                    <tbody id="ups-shipping-rates"></tbody>
                                </table>
                            </div>
                        `;
                        ratesContainer.appendChild(upsSection);
                        
                        const upsRatesBody = document.getElementById('ups-shipping-rates');
                        
                        upsData.RateResponse.RatedShipment.forEach(shipment => {
                            // Get the service name
                            const serviceCode = shipment.Service.Code;
                            let serviceName = "UPS Ground";
                            
                            // Map UPS service codes to readable names
                            const serviceNames = {
                                "01": "UPS Next Day Air",
                                "02": "UPS 2nd Day Air",
                                "03": "UPS Ground",
                                "07": "UPS Worldwide Express",
                                "08": "UPS Worldwide Expedited",
                                "11": "UPS Standard",
                                "12": "UPS 3 Day Select",
                                "13": "UPS Next Day Air Saver",
                                "14": "UPS Next Day Air Early",
                                "54": "UPS Worldwide Express Plus",
                                "59": "UPS 2nd Day Air A.M.",
                                "65": "UPS Saver"
                            };
                            
                            if (serviceNames[serviceCode]) {
                                serviceName = serviceNames[serviceCode];
                            }
                            
                            const baseRate = parseFloat(
                                shipment.TotalCharges.MonetaryValue) || 0;
                            
                            // Calculate total with markups
                            const totalCharges = baseRate + stateMarkup;
                            
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input shipping-rate-radio" type="radio" 
                                            name="shipping_option" id="ups-${serviceCode}" 
                                            data-carrier="UPS" data-service="${serviceName}"
                                            data-charge="${totalCharges.toFixed(2)}" value="ups-${serviceCode}">
                                    </div>
                                </td>
                                <td>${serviceName}</td>
                                <td>${totalWeight.toFixed(2)} lbs</td>
                                <td>$${baseRate.toFixed(2)}</td>
                                <td>${stateMarkup > 0 ? '$' + stateMarkup.toFixed(2) : '$0.00'}</td>
                                <td>$${totalCharges.toFixed(2)}</td>
                            `;
                            
                            upsRatesBody.appendChild(row);
                        });
                        
                        if (upsRatesBody.children.length === 0) {
                            ratesContainer.innerHTML = `
                                <div class="alert alert-danger mb-0">
                                    No UPS shipping rates available for this service type.
                                </div>
                            `;
                        }
                    } else {
                        ratesContainer.innerHTML = `
                            <div class="alert alert-danger mb-0">
                                No UPS shipping rates available. Please verify the shipping address and try again.
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('UPS API error:', error);
                    ratesContainer.innerHTML = `
                        <div class="alert alert-danger mb-0">
                        Error fetching UPS rates: ${error.message}. Please try again later.
                        </div>
                    `;
                });
            }
        }
        
        function deleteShipping() {
            // Hide the shipping rates card
            document.getElementById('shipping-rates-card').style.display = 'none';
            
            // Reset shipping cost to 0
            document.getElementById('shipping-cost').value = 0;
            
            // Update order totals through the existing function
            updateOrderTotals();
        }
        
        function handleShippingRateSelection(event) {
            if (event.target.classList.contains('shipping-rate-radio')) {
                const shippingCost = parseFloat(event.target.dataset.charge);
                
                // Update shipping cost input
                document.getElementById('shipping-cost').value = shippingCost;
                
                // Update the shipping cost display in the order totals
                const shippingCostDisplay = document.getElementById('shipping-cost-display');
                if (shippingCostDisplay) {
                    shippingCostDisplay.textContent = parseFloat(shippingCost).toFixed(2);
                }
                
                // Update order totals
                updateOrderTotals();
            }
        }

        function updateOrderTotals() {
            try {
                // Get order items from localStorage
                const orderItemsStr = localStorage.getItem('orderItems') || '[]';
                const orderItems = JSON.parse(orderItemsStr);
                
                // Calculate subtotal from order items
                const subtotal = orderItems.reduce((total, item) => {
                    return total + (parseFloat(item.price) * parseInt(item.quantity));
                }, 0);
                
                // Get values from form fields
                const shippingCost = parseFloat(document.getElementById('shipping-cost').value) || 0;
                const taxRate = parseFloat(document.getElementById('tax-rate').value) || 0;
                const discount = parseFloat(document.getElementById('discount').value) || 0;
                
                // Calculate tax amount
                const taxAmount = (subtotal * taxRate) / 100;
                
                // Calculate total cost
                const total = subtotal + shippingCost + taxAmount - discount;
                
                // Update display elements
                const subtotalElement = document.getElementById('subtotal');
                if (subtotalElement) {
                    subtotalElement.textContent = subtotal.toFixed(2);
                }
                
                const shippingCostDisplay = document.getElementById('shipping-cost-display');
                if (shippingCostDisplay) {
                    shippingCostDisplay.textContent = shippingCost.toFixed(2);
                }
                
                const taxAmountElement = document.getElementById('tax-amount');
                if (taxAmountElement) {
                    taxAmountElement.textContent = taxAmount.toFixed(2);
                }
                
                const discountDisplay = document.getElementById('discount-display');
                if (discountDisplay) {
                    discountDisplay.textContent = discount.toFixed(2);
                }
                
                const totalElement = document.getElementById('total');
                if (totalElement) {
                    totalElement.textContent = total.toFixed(2);
                }
                
                console.log('Order totals updated:', {
                    subtotal: subtotal.toFixed(2),
                    shipping: shippingCost.toFixed(2),
                    tax: taxAmount.toFixed(2),
                    discount: discount.toFixed(2),
                    total: total.toFixed(2)
                });
            } catch (error) {
                console.error('Error updating order totals:', error);
            }
        }

        function handleShippingRateSelection(event) {
            if (!event.target.classList.contains('shipping-rate-radio')) {
                return;
            }
            
            const selectedOption = event.target;
            
            // Get shipping data from the selected option
            const carrier = selectedOption.getAttribute('data-carrier');
            const service = selectedOption.getAttribute('data-service');
            const charge = selectedOption.getAttribute('data-charge');
            
            console.log(`Selected shipping: ${carrier} ${service} for $${charge}`);
            
            // Update hidden shipping fields
            document.getElementById('shipping_carrier').value = carrier || '';
            document.getElementById('shipping_service').value = service || '';
            document.getElementById('shipping_cost').value = charge || '0';
            
            // Update shipping cost input field
            const shippingCostInput = document.getElementById('shipping-cost');
            if (shippingCostInput) {
                shippingCostInput.value = charge || '0';
                
                // Trigger change event to update totals
                const changeEvent = new Event('change');
                shippingCostInput.dispatchEvent(changeEvent);
                
                // Update shipping cost display
                const shippingCostDisplay = document.getElementById('shipping-cost-display');
                if (shippingCostDisplay) {
                    shippingCostDisplay.textContent = parseFloat(charge || 0).toFixed(2);
                }
                
                // Update totals
                updateOrderTotals();
            }
        }
        
        function makeShippingRatesEditable() {
            console.log('Making shipping rates editable');
            
            // Get all table cells in the shipping rates tables
            const cells = document.querySelectorAll('#shipping-rates-container td:not(:first-child)');
            
            cells.forEach(cell => {
                // Add a click handler to each cell
                cell.addEventListener('click', function(e) {
                    // Skip cells with checkboxes
                    if (cell.querySelector('input[type="radio"]')) {
                        return;
                    }
                    
                    // Get the current cell value
                    let value = cell.textContent.trim();
                    if (value.startsWith('$')) {
                        value = value.substring(1);
                    }
                    
                    // Create an input field
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.value = value;
                    input.style.width = '100%';
                    input.style.boxSizing = 'border-box';
                    
                    // Replace the cell content with the input
                    cell.textContent = '';
                    cell.appendChild(input);
                    input.focus();
                    
                    // Handle the blur event (when focus leaves the input)
                    input.addEventListener('blur', function() {
                        const newValue = this.value.trim();
                        
                        // Check if we're dealing with a price field
                        const isPriceField = cell.cellIndex === 6; // Price column
                        
                        // Format based on field type
                        if (cell.cellIndex >= 4 && cell.cellIndex <= 6) { // Cost, Markup, Price columns
                            cell.textContent = '$' + newValue;
                        } else {
                            cell.textContent = newValue;
                        }
                        
                        // If this is the price field and the row is selected, update the shipping cost
                        if (isPriceField) {
                            const row = cell.parentNode;
                            const radioInput = row.querySelector('input[type="radio"]');
                            
                            if (radioInput && radioInput.checked) {
                                // Update the radio button data attribute
                                radioInput.setAttribute('data-charge', newValue);
                                
                                // Update the shipping cost field
                                const shippingCostInput = document.getElementById('shipping-cost');
                                if (shippingCostInput) {
                                    shippingCostInput.value = newValue;
                                    
                                    // Update shipping cost display
                                    const shippingCostDisplay = document.getElementById('shipping-cost-display');
                                    if (shippingCostDisplay) {
                                        shippingCostDisplay.textContent = parseFloat(newValue || 0).toFixed(2);
                                    }
                                    
                                    // Update order totals
                                    updateOrderTotals();
                                }
                            }
                        }
                    });
                    
                    // Handle Enter key press
                    input.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            this.blur();
                        }
                    });
                    
                    // Stop the click event from propagating
                    e.stopPropagation();
                });
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Set up event listeners
            const calculateShippingBtn = document.getElementById('calculate-shipping-btn');
            if (calculateShippingBtn) {
                calculateShippingBtn.addEventListener('click', calculateShipping);
                console.log('Calculate shipping button listener attached');
            }
            
            const deleteShippingBtn = document.getElementById('delete-shipping-btn');
            if (deleteShippingBtn) {
                deleteShippingBtn.addEventListener('click', deleteShipping);
            }
            
            const shippingRatesContainer = document.getElementById('shipping-rates-container');
            if (shippingRatesContainer) {
                shippingRatesContainer.addEventListener('change', function(event) {
                    handleShippingRateSelection(event);
                });
                
                // Watch for new shipping rate elements being added to the DOM
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'childList' && mutation.addedNodes.length) {
                            // Check if added nodes contain our shipping tables
                            mutation.addedNodes.forEach(function(node) {
                                if (node.nodeType === 1 && (
                                    node.id === 'ups-shipping-section' || 
                                    node.id === 'freight-shipping-section' ||
                                    node.querySelector('table')
                                )) {
                                    console.log('Shipping tables added, making editable');
                                    setTimeout(makeShippingRatesEditable, 100);
                                }
                            });
                        }
                    });
                });
                
                // Start observing the container for changes
                observer.observe(shippingRatesContainer, { childList: true, subtree: true });
            }
            
            const shippingCostInput = document.getElementById('shipping-cost');
            if (shippingCostInput) {
                shippingCostInput.addEventListener('input', function() {
                    // Update shipping cost display when input changes
                    const shippingCostDisplay = document.getElementById('shipping-cost-display');
                    if (shippingCostDisplay) {
                        shippingCostDisplay.textContent = parseFloat(this.value || 0).toFixed(2);
                    }
                    updateOrderTotals();
                });
            }
            
            // Add event listener for customer selection
            const customerSelect = document.getElementById('customer-select');
            if (customerSelect) {
                customerSelect.addEventListener('change', function() {
                    const customerId = this.value;
                    if (!customerId) {
                        clearAddressSelects();
                        return;
                    }
                    
                    // Fetch addresses for selected customer
                    fetchCustomerAddresses(customerId);
                });
            }
            
            // Add listeners for address selection
            const shippingAddressSelect = document.getElementById('shipping-address');
            if (shippingAddressSelect) {
                shippingAddressSelect.addEventListener('change', function() {
                    const selected = this.options[this.selectedIndex];
                    if (selected && selected.value) {
                        fillAddressFields('shipping', {
                            address1: selected.getAttribute('data-address1'),
                            address2: selected.getAttribute('data-address2'),
                            city: selected.getAttribute('data-city'),
                            state: selected.getAttribute('data-state'),
                            zip: selected.getAttribute('data-zip')
                        });
                        
                        // If "Same as Shipping" is checked, update billing too
                        const sameAsShipping = document.getElementById('same-as-shipping');
                        if (sameAsShipping && sameAsShipping.checked) {
                            copyShippingToBilling();
                        }
                    } else {
                        clearShippingFields();
                    }
                });
            }
            
            const billingAddressSelect = document.getElementById('billing-address');
            if (billingAddressSelect) {
                billingAddressSelect.addEventListener('change', function() {
                    const selected = this.options[this.selectedIndex];
                    if (selected && selected.value) {
                        fillAddressFields('billing', {
                            address1: selected.getAttribute('data-address1'),
                            address2: selected.getAttribute('data-address2'),
                            city: selected.getAttribute('data-city'),
                            state: selected.getAttribute('data-state'),
                            zip: selected.getAttribute('data-zip')
                        });
                    } else {
                        clearBillingFields();
                    }
                });
            }
            
            // Order items table events
            const orderItemsTable = document.getElementById('orderItemsTable');
            if (orderItemsTable) {
                // Handle quantity changes
                orderItemsTable.addEventListener('change', handleQuantityChange);
                
                // Handle item deletion
                orderItemsTable.addEventListener('click', handleItemDeletion);
            }
            
            // Add Product button
            const addProductBtn = document.getElementById('add-product-btn');
            if (addProductBtn) {
                addProductBtn.addEventListener('click', openCategoryPage);
                console.log('Add product button listener attached');
            }
            
            // Initialize order items table
            updateOrderItemsTable();
            
            // Same as shipping checkbox
            const sameAsShipping = document.getElementById('same-as-shipping');
            if (sameAsShipping) {
                sameAsShipping.addEventListener('change', function() {
                    if (this.checked) {
                        copyShippingToBilling();
                        
                        // Disable billing address fields
                        document.getElementById('billing-address').disabled = true;
                        document.getElementById('billing-address-1').readOnly = true;
                        document.getElementById('billing-address-2').readOnly = true;
                        document.getElementById('billing-city').readOnly = true;
                        document.getElementById('billing-state').readOnly = true;
                        document.getElementById('billing-zip').readOnly = true;
                    } else {
                        // Enable billing address fields
                        document.getElementById('billing-address').disabled = false;
                        document.getElementById('billing-address-1').readOnly = false;
                        document.getElementById('billing-address-2').readOnly = false;
                        document.getElementById('billing-city').readOnly = false;
                        document.getElementById('billing-state').readOnly = false;
                        document.getElementById('billing-zip').readOnly = false;
                    }
                });
            }
            
            // Add listeners for address book buttons
            document.addEventListener('click', function(event) {
                // Handle select address button
                if (event.target.closest('.select-address')) {
                    const btn = event.target.closest('.select-address');
                    const type = btn.getAttribute('data-type').split(',');
                    const addressData = {
                        address1: btn.getAttribute('data-address1'),
                        address2: btn.getAttribute('data-address2'),
                        city: btn.getAttribute('data-city'),
                        state: btn.getAttribute('data-state'),
                        zip: btn.getAttribute('data-zip')
                    };
                    
                    if (type.includes('Shipping')) {
                        fillAddressFields('shipping', addressData);
                    }
                    if (type.includes('Billing')) {
                        fillAddressFields('billing', addressData);
                    }
                    
                    // Close modal
                    const addressBookModal = document.getElementById('addressBookModal');
                    const modal = bootstrap.Modal.getInstance(addressBookModal);
                    if (modal) {
                        modal.hide();
                    }
                }
            });
            
            // Initialize order totals on page load
            updateOrderTotals();
            
            // Make updateOrderItemsTable available to child windows
            window.updateOrderItemsTable = updateOrderItemsTable;
        });
        
        // Functions for managing order items
        function updateOrderItemsTable() {
            try {
                // Get items from localStorage
                const orderItems = JSON.parse(localStorage.getItem('orderItems') || '[]');
                const tbody = document.querySelector('#orderItemsTable tbody');
                if (!tbody) return;
                
                // Clear existing rows
                tbody.innerHTML = '';
                
                // Add each item to the table
                orderItems.forEach((item, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${item.itemNo}</td>
                        <td>${item.productName}</td>
                        <td>${item.size}</td>
                        <td>${item.weight}</td>
                        <td>$${parseFloat(item.price).toFixed(2)}</td>
                        <td>
                            <input type="number" class="form-control form-control-sm item-quantity" 
                                value="${item.quantity}" min="1" style="width: 60px"
                                data-item-id="${item.id}">
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger delete-item" 
                                data-item-id="${item.id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
                
                // Update order totals
                updateOrderTotals();
                
                // Store items in hidden field for form submission
                document.getElementById('orderItemsJson').value = JSON.stringify(orderItems);
            } catch (error) {
                console.error('Error updating order items table:', error);
            }
        }
        
        // Function to handle quantity changes
        function handleQuantityChange(event) {
            const itemQuantityInput = event.target;
            if (!itemQuantityInput.classList.contains('item-quantity')) return;
            
            const itemId = itemQuantityInput.getAttribute('data-item-id');
            const newQuantity = parseInt(itemQuantityInput.value) || 1;
            
            try {
                let orderItems = JSON.parse(localStorage.getItem('orderItems') || '[]');
                const itemIndex = orderItems.findIndex(item => item.id === itemId);
                
                if (itemIndex !== -1) {
                    orderItems[itemIndex].quantity = newQuantity;
                    localStorage.setItem('orderItems', JSON.stringify(orderItems));
                    updateOrderTotals();
                }
            } catch (error) {
                console.error('Error updating item quantity:', error);
            }
        }
        
        // Function to handle item deletion
        function handleItemDeletion(event) {
            const deleteButton = event.target.closest('.delete-item');
            if (!deleteButton) return;
            
            const itemId = deleteButton.getAttribute('data-item-id');
            
            try {
                let orderItems = JSON.parse(localStorage.getItem('orderItems') || '[]');
                orderItems = orderItems.filter(item => item.id !== itemId);
                localStorage.setItem('orderItems', JSON.stringify(orderItems));
                updateOrderItemsTable();
            } catch (error) {
                console.error('Error deleting item:', error);
            }
        }
        
        // Function to open category page
        function openCategoryPage() {
            try {
                const orderId = document.querySelector('input[name="order_id"]').value;
                const url = "{{ route('ams.orders.categories') }}";
                window.open(`${url}?order_id=${orderId}`, 'categoryWindow');
            } catch (error) {
                console.error('Error opening category page:', error);
            }
        }
        
        // Functions to handle customer address selection and loading
        function clearAddressSelects() {
            const shippingAddressSelect = document.getElementById('shipping-address');
            const billingAddressSelect = document.getElementById('billing-address');
            
            if (shippingAddressSelect) {
                shippingAddressSelect.innerHTML = '<option value="">Select address</option>';
            }
            
            if (billingAddressSelect) {
                billingAddressSelect.innerHTML = '<option value="">Select address</option>';
            }
            
            clearAddressFields();
        }
        
        function clearAddressFields() {
            clearShippingFields();
            clearBillingFields();
        }
        
        function clearShippingFields() {
            document.getElementById('shipping-address-1').value = '';
            document.getElementById('shipping-address-2').value = '';
            document.getElementById('shipping-city').value = '';
            document.getElementById('shipping-state').value = '';
            document.getElementById('shipping-zip').value = '';
        }
        
        function clearBillingFields() {
            document.getElementById('billing-address-1').value = '';
            document.getElementById('billing-address-2').value = '';
            document.getElementById('billing-city').value = '';
            document.getElementById('billing-state').value = '';
            document.getElementById('billing-zip').value = '';
        }
        
        function copyShippingToBilling() {
            document.getElementById('billing-address-1').value = document.getElementById('shipping-address-1').value;
            document.getElementById('billing-address-2').value = document.getElementById('shipping-address-2').value;
            document.getElementById('billing-city').value = document.getElementById('shipping-city').value;
            document.getElementById('billing-state').value = document.getElementById('shipping-state').value;
            document.getElementById('billing-zip').value = document.getElementById('shipping-zip').value;
        }
        
        function fillAddressFields(prefix, data) {
            document.getElementById(`${prefix}-address-1`).value = data.address1 || '';
            document.getElementById(`${prefix}-address-2`).value = data.address2 || '';
            document.getElementById(`${prefix}-city`).value = data.city || '';
            document.getElementById(`${prefix}-state`).value = data.state || '';
            document.getElementById(`${prefix}-zip`).value = data.zip || '';
        }
        
        function updateAddressSelects(addresses) {
            const shippingSelect = document.getElementById('shipping-address');
            const billingSelect = document.getElementById('billing-address');
            
            // Clear existing options
            shippingSelect.innerHTML = '<option value="">Select address</option>';
            billingSelect.innerHTML = '<option value="">Select address</option>';
            
            // Add shipping addresses
            addresses.forEach(addr => {
                if (addr.shipping_flag) {
                    const option = document.createElement('option');
                    option.value = addr.address_id;
                    option.textContent = `${addr.address_1 || ''} ${addr.city || ''}, ${addr.state || ''} ${addr.zipcode || ''}`;
                    
                    // Store address data as attributes
                    option.setAttribute('data-address1', addr.address_1 || '');
                    option.setAttribute('data-address2', addr.address_2 || '');
                    option.setAttribute('data-city', addr.city || '');
                    option.setAttribute('data-state', addr.state || '');
                    option.setAttribute('data-zip', addr.zipcode || '');
                    
                    shippingSelect.appendChild(option);
                }
            });
            
            // Add billing addresses
            addresses.forEach(addr => {
                if (addr.billing_flag) {
                    const option = document.createElement('option');
                    option.value = addr.address_id;
                    option.textContent = `${addr.address_1 || ''} ${addr.city || ''}, ${addr.state || ''} ${addr.zipcode || ''}`;
                    
                    // Store address data as attributes
                    option.setAttribute('data-address1', addr.address_1 || '');
                    option.setAttribute('data-address2', addr.address_2 || '');
                    option.setAttribute('data-city', addr.city || '');
                    option.setAttribute('data-state', addr.state || '');
                    option.setAttribute('data-zip', addr.zipcode || '');
                    
                    billingSelect.appendChild(option);
                }
            });
        }
        
        function updateAddressBookTable(addresses) {
            const tbody = document.getElementById('addressBookTable');
            if (!tbody) return;
            
            // Clear table
            tbody.innerHTML = '';
            
            addresses.forEach(addr => {
                const types = [];
                if (addr.shipping_flag) types.push('Shipping');
                if (addr.billing_flag) types.push('Billing');
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${addr.address_1 || ''}</td>
                    <td>${addr.address_2 || ''}</td>
                    <td>${addr.city || ''}</td>
                    <td>${addr.state || ''}</td>
                    <td>${addr.zipcode || ''}</td>
                    <td>${types.join(', ')}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-primary select-address" 
                                data-type="${types.join(',')}"
                                data-address1="${addr.address_1 || ''}"
                                data-address2="${addr.address_2 || ''}"
                                data-city="${addr.city || ''}"
                                data-state="${addr.state || ''}"
                                data-zip="${addr.zipcode || ''}">
                                <i class="fas fa-check"></i>
                            </button>
                            <button type="button" class="btn btn-warning edit-address" 
                                data-address-id="${addr.address_id}"
                                data-address1="${addr.address_1 || ''}"
                                data-address2="${addr.address_2 || ''}"
                                data-city="${addr.city || ''}"
                                data-state="${addr.state || ''}"
                                data-zip="${addr.zipcode || ''}"
                                data-shipping="${addr.shipping_flag}"
                                data-billing="${addr.billing_flag}">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-danger delete-address" data-address-id="${addr.address_id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // Function to make an AJAX request using Fetch API
        function fetchCustomerAddresses(customerId) {
            // Show loading state
            const shippingAddress = document.getElementById('shipping-address');
            const billingAddress = document.getElementById('billing-address');
            
            if (shippingAddress) {
                shippingAddress.innerHTML = '<option value="">Loading addresses...</option>';
            }
            
            if (billingAddress) {
                billingAddress.innerHTML = '<option value="">Loading addresses...</option>';
            }
            
            // Make AJAX request
            fetch(`/ams/customers/${customerId}/addresses`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success && data.addresses) {
                        updateAddressSelects(data.addresses);
                        updateAddressBookTable(data.addresses);
                    } else {
                        clearAddressSelects();
                        console.error('No addresses in response:', data);
                    }
                })
                .catch(error => {
                    console.error('Error loading addresses:', error);
                    clearAddressSelects();
                });
        }
        
        // Function to handle shipping rate selection
        function handleShippingRateSelection(event) {
            if (event.target.type !== 'radio') return;
            
            // Get the selected shipping option details
            const selectedOption = event.target;
            const carrier = selectedOption.getAttribute('data-carrier');
            const service = selectedOption.getAttribute('data-service');
            const cost = parseFloat(selectedOption.getAttribute('data-cost')) || 0;
            
            console.log('Selected shipping option:', { carrier, service, cost });
            
            // Update shipping fields
            const shippingCarrierInput = document.getElementById('shipping-carrier');
            const shippingServiceInput = document.getElementById('shipping-service');
            const shippingCostInput = document.getElementById('shipping-cost');
            
            if (shippingCarrierInput) shippingCarrierInput.value = carrier || '';
            if (shippingServiceInput) shippingServiceInput.value = service || '';
            if (shippingCostInput) shippingCostInput.value = cost.toFixed(2);
            
            // Update shipping cost display
            const shippingCostDisplay = document.getElementById('shipping-cost-display');
            if (shippingCostDisplay) {
                shippingCostDisplay.textContent = cost.toFixed(2);
            }
            
            // Update order totals
            updateOrderTotals();
        }
    </script>
@endsection
